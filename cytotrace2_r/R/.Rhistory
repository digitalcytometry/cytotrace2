if (enableFast) {
if (Sys.info()["sysname"] == "Windows") {
ncores = 1
message("Windows OS can run only on 1 core")
} else {
if (is.null(ncores)) {
ncores <- detectCores(all.tests = FALSE, logical = FALSE)
}
message("cytotrace2: Running on ", ncores, " core(s).")
}
} else {
if (is.null(ncores)) {
ncores <- 1
}
}
# managing the subsamplesize for first block
if (subsamplesize1 > ncol(data)) {
message ( "The passed subsample size is greater than the number of cells in dataset.
Now setting subsample size to min(ncol(data), 10000)")
subsamplesize1 <- min(ncol(data), 10000)
} else {
subsamplesize1 <- min(subsamplesize1, 10000)
message("Subsamplesize values greater than 10k will be reduced to 10k for efficiency.")
}
# generating subsamples
chunk <- round(ncol(data) / subsamplesize1)
subsamples <-
split(1:ncol(data), sample(factor(1:ncol(data) %% chunk)))
message('cytotrace2: Running on ', chunk, " subsample(s) of length " , subsamplesize1)
# reading preconstructed model weights
parameter_dict <-
readRDS(system.file("extdata", "parameter_dict_17.rds",
package = "CytoTRACE2"))
# REMOVE
parameter_dict <- parameter_dict[1]
# running preprocessing and prediction
message('cytotrace2: Started preprocessing and prediction on subsamples')
if (enableFast) {
message('cytotrace2: Running with fast mode (subsamples are processed in parallel)')
results <-
parallel::mclapply(subsamples, mc.cores = ncores, mc.silent = FALSE, function(subsample) {
dt <- data[subsample]
preprocessed_data <- preprocessData(dt)
expression_data <- preprocessed_data[[1]]
ranked_data <- preprocessed_data[[2]]
predicted_df <-
predictData(parameter_dict, ranked_data, parallelize_models, ncores)
rownames(predicted_df) <- colnames(expression_data)
rbind(expression_data, t(predicted_df))
})
} else {
message('cytotrace2: Running with slow mode (subsamples are processed sequentially)')
results <- lapply(subsamples, function(subsample) {
dt <- data[subsample]
preprocessed_data <- preprocessData(dt)
expression_data <- preprocessed_data[[1]]
ranked_data <- preprocessed_data[[2]]
predicted_df <-
predictData(parameter_dict, ranked_data, parallelize_models, ncores)
rownames(predicted_df) <- colnames(expression_data)
cytotrace <-
smoothData(
expression_data,
predicted_df,
ncores = ncores,
enableFast = enableFast,
subsamplesize = subsamplesize2
)
# Prepare final output
predicted_df$Predicted.Order <- cytotrace
# Define the ranges and labels
ranges <- c(-0.1, 0.1, 0.3, 0.5, 0.7, 0.9, 1.1)
labels <-
c(
'Differentiated',
'Unipotent',
'Oligopotent',
'Multipotent',
'Pluripotent',
'Totipotent'
)
# Assign labels based on ranges
order_vector <-
cut(predicted_df$Predicted.Order,
breaks = ranges,
labels = labels)
predicted_df$Predicted.Potency <- order_vector
list(expression_data, predicted_df)
})
}
# binded_results <- bind_cols(results)
# expression_data <- binded_results[-((nrow(binded_results) - 1):nrow(binded_results)), ]
# predicted_df <- t(binded_results[(nrow(binded_results) - 1):nrow(binded_results), ])
# colnames(predicted_df) <- c("Raw.Predicted.Order", "Raw.Predicted.Potency")
expression_data <- do.call(cbind, lapply(results, function(x) x[[1]]))
predicted_df <- do.call(rbind, lapply(results, function(x) x[[2]]))
# message('cytotrace2: Started smoothing predicted values')
#
# cytotrace <-
#   smoothData(
#     expression_data,
#     predicted_df,
#     ncores = ncores,
#     enableFast = enableFast,
#     subsamplesize = subsamplesize2
#   )
if (!isSeurat) {
message('cytotrace2: Finished')
return(list(expression_data, predicted_df))
} else {
# Create the assay
cytotrace2_expression <- CreateAssayObject(counts = expression_data)
# Add the assay to the Seurat object
object$cytotrace2_expression <- cytotrace2_expression
object <- AddMetaData(
object = input,
metadata = setNames(predicted_df$Predicted.Order, rownames(predicted_df)),
col.name = 'predicted_order'
)
object <- AddMetaData(
object = input,
metadata = setNames(predicted_df$Predicted.Potency, rownames(predicted_df)),
col.name = 'predicted_potency'
)
object <- AddMetaData(
object = input,
metadata = setNames(
predicted_df$Raw.Predicted.Order,
rownames(predicted_df)
),
col.name = 'raw_predicted_order'
)
object <- AddMetaData(
object = input,
metadata = setNames(
predicted_df$Raw.Predicted.Potency,
rownames(predicted_df)
),
col.name = 'raw_predicted_potency'
)
message('cytotrace2: Finished')
return(object)
}
}
cytotrace2(input)
cytotrace2_results <- cytotrace2(input)
View(cytotrace2_results)
plotData(cytotrace2_result, annotation)
plotData(cytotrace2_results, annotation)
#'
#' @param cytotrace2_result output of cytotrace2 function
#' @param annotation The annotation data.
#' @param pc_dims The number of principal components to use for UMAP visualization (default: 30).
#' @param isSeurat Logical, indicating whether the input is a Seurat object (default is FALSE).
#' @return NULL (3 plots are displayed: 2 UMAPs colored by predicted potency group and order,
#' 1 boxplot of phenotype ~ order).
#' @export
#'
#' @examples
annotation <- read.csv(system.file("extdata", "Mouse_Data_StandardProtocol_Neuron_phenotype_GSG.csv", package = "CytoTRACE2"), header = TRUE, row.names = 1)
plotData(cytotrace2_results, annotation)
expression <- cytotrace2_result[1]
cytotrace2_result <- cytotrace2_results
expression <- cytotrace2_result[1]
View(expression)
#' @param isSeurat Logical, indicating whether the input is a Seurat object (default is FALSE).
#' @return NULL (3 plots are displayed: 2 UMAPs colored by predicted potency group and order,
#' 1 boxplot of phenotype ~ order).
#' @export
#'
#' @examples
# annotation <- read.csv(system.file("extdata", "Mouse_Data_StandardProtocol_Neuron_phenotype_GSG.csv", package = "CytoTRACE2"), header = TRUE, row.names = 1)
# cytotrace2_result <- cytotrace2(system.file("extdata", "Mouse_Data_StandardProtocol_Neuron_phenotype_GSG.csv", package = "CytoTRACE2"))
# plotData(cytotrace2_result, annotation)
#'
plotData <- function(cytotrace2_result, annotation, pc_dims = 30, isSeurat = FALSE) {
if (isSeurat) {
seurat <- cytotrace2_result
DefaultAssay(seurat) <- 'cytotrace2_expression'
prediction <- data.frame(
Predicted.Order = seurat@meta.data$predicted_order,
Predicted.Potency = seurat@meta.data$predicted_potency,
Raw.Predicted.Order = seurat@meta.data$raw_predicted_order,
Raw.Predicted.Potency = seurat@meta.data$raw_predicted_potency
)
} else {
expression <- cytotrace2_result[[1]]
seurat <- CreateSeuratObject(counts = expression, project = "nn", min.cells = 3, min.features = 200)
prediction <- cytotrace2_result[[2]]
}
# Normalizing data - LogNormalize
seurat <- NormalizeData(seurat, normalization.method = "LogNormalize", scale.factor = 10000) ##defaults
# Calculate variable features
seurat <- FindVariableFeatures(seurat, selection.method = "vst", nfeatures = 2000)
# Scale data
all.genes <- rownames(seurat)
seurat <- ScaleData(seurat, features = all.genes)
# PCA
seurat <- RunPCA(seurat, features = VariableFeatures(object = seurat))
# visualize clustering
seurat <- RunUMAP(seurat, dims = 1:pc_dims) # default to 30
# Add needed values to metadata
# merge annotation and predicted labels, if annotation exists
prediction$id  <- 1:nrow(prediction)
names(annotation)[1] <- "phenotype"
metadata <- merge(prediction, annotation, by = 'row.names', all.x = TRUE)
medians <- aggregate(Predicted.Order ~ phenotype, data = metadata, FUN = median)
colnames(medians)[2] <- "median_pred_order"
metadata <- merge(metadata, medians, by = "phenotype", all.x = TRUE)
metadata <- metadata[order(metadata$id), ]
rownames(metadata) <- metadata$Row.names
metadata$Row.names <- NULL
seurat <- AddMetaData(
object = seurat,
metadata = setNames(metadata$Predicted.Order, rownames(metadata)),
col.name = 'pred_order'
)
seurat <- AddMetaData(
object = seurat,
metadata = setNames(metadata$Predicted.Potency, rownames(metadata)),
col.name = 'pred_potency'
)
seurat <- AddMetaData(
object = seurat,
metadata = setNames(metadata$phenotype, rownames(metadata)),
col.name = 'phenotype'
)
seurat <- AddMetaData(
object = seurat,
metadata = setNames(metadata$median_pred_order, rownames(metadata)),
col.name = 'median_pred_order'
)
# plotting
# UMAP by potency groups
potency_umap <- DimPlot(seurat, reduction = "umap", group.by = "pred_potency", label = TRUE) +
scale_color_manual(values = colorRampPalette(colors = paletteer_c("grDevices::RdYlBu", 30))(6), name = "Predicted Potency", breaks = rev(c('Differentiated', 'Unipotent', 'Oligopotent', 'Multipotent', 'Pluripotent', 'Totipotent'))) +
ggtitle("CytoTRACE 2")
ggsave("potency_umap.png", potency_umap)
# UMAP by order
order_umap <- FeaturePlot(seurat, "pred_order") +
scale_colour_gradientn(colours = rev(paletteer_c("grDevices::RdYlBu", 30)), na.value = "transparent",
breaks=seq(0, 1, by = 0.2), labels=c('Differentiated', 'Unipotent', 'Oligopotent', 'Multipotent', 'Pluripotent', 'Totipotent'),
limits=c(0,1), name = "Predicted Order \n" ) +
ggtitle("CytoTRACE 2")
ggsave("order_umap.png", order_umap)
# Boxplot by phenotype and pred_order
# adjust ordering of boxes according to the order range
seurat@meta.data$ordered_phenotype <- reorder(seurat@meta.data$phenotype, seurat@meta.data$median_pred_order)
seurat@meta.data$ordered_phenotype <- factor(seurat@meta.data$ordered_phenotype, levels = rev(levels(seurat@meta.data$ordered_phenotype)))
# Create a boxplot
order_boxplot <- ggplot(seurat@meta.data[!is.na(seurat@meta.data$ordered_phenotype), ], aes(x = ordered_phenotype, y = pred_order)) + # use median and continuous palette
geom_boxplot(aes(fill = median_pred_order), width = 0.5, alpha = 0.5) +
geom_jitter(aes(fill = median_pred_order), width = 0.05, height = 0, alpha = 0.5, shape = 21, stroke = 0.1) +
theme_classic() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 30, hjust = 1, size = 12),  # Increase text size
axis.text.y = element_text(size = 12),  # Increase text size
axis.title = element_text(size = 14),  # Increase title text size
plot.title = element_text(size = 16, face = "bold")) +
scale_y_continuous(breaks=seq(0, 1, by = 0.2),  limits = c(0,1), labels=c('Differentiated', 'Unipotent', 'Oligopotent', 'Multipotent', 'Pluripotent', 'Totipotent')) +
scale_fill_gradientn(colors = rev(paletteer_c("grDevices::RdYlBu", 30)))+
scale_color_gradientn(colors = rev(paletteer_c("grDevices::RdYlBu", 30)))+
labs(x = "Phenotype", y = 'Predicted Order') +
ggtitle("Differentiation status by phenotype")
ggsave("orderBoxplot_byPheno.png", order_boxplot)
}
plotData(cytotrace2_results, annotation)
expression <- cytotrace2_result[[1]]
View(expression_data)
View(results)
View(predicted_df)
expression_data <- do.call(cbind, lapply(results, function(x) x[[1]]))
View(expression_data)
colnames(expression_data) <- sub("^0\\.", "", colnames(expression_data))
View(predicted_df)
rownames(predicted_df) <- sub("^0\\.", "", rownames(predicted_df))
#' @title cytotrace2: Predicting Cellular Potency and Ordering
#'
#' @description This function generates single-cell predictions of differentiation status from scRNA-seq data.
#' It takes in a matrix of gene expression values where columns are cells and rows are genes (either with a path to the
#' tab separated file or a Seurat object)\cr\cr
#'
#' @param input The input single-cell RNA-seq data. It can be either a data frame or a Seurat object.
#' @param isSeurat Logical, indicating whether the input is a Seurat object (default is FALSE).
#' @param enableFast Logical, whether to run the function on subsamples in parallel on multiple threads (default is TRUE).
#' @param parallelize_models  Logical, whether to run the prediction function on models in parallel on multiple threads (default is TRUE).
#' @param ncores Integer indicating the number of cores to utilize when parallelize_models and/or enableFast are TRUE
#' (default is NULL, pipeline detects the number of available cores and runs on that number, for Windows, will be set to 1).
#' @param subsamplesize1 Integer indicating the number of cells to subsample for the pipeline steps running after loading and before smoothing
#' (default is 10000, pipeline adjusts this value if greater than number of columns in input data or greater than 10K)
#' @param subsamplesize2 Integer indicating the number of cells to subsample for the smoothing step of the pipeline
#' (default is 3000, pipeline adjusts this value if greater than number of columns in input data or greater than 3K)
#'
#' @return If `isSeurat` is FALSE, the function returns a list of 2 elements: a matrix of transformed and processed expression data,
#' and a dataframe containing final predicted cellular potency label and porency score (order)
#' If `isSeurat` is TRUE, it adds an assay to the Seurat object of the transformed and processed expression matrix, called "cytotrace2_expression".
#' Also adds metadata elements for all columns of prediction dataframe, and returns the modified Seurat object.
#'
#' @details
#' The cytotrace2 function performs the following steps:
#'
#' 1. Reads and preprocesses the input data.
#' 2. Predicts single-cell differentiation status (with discrete potency labels and continuous (range 0-1) order).
#' 3. Smoothes the predicted values using regression and diffusion.
#'
#'
#' @examples
#' # Load a single-cell RNA-seq dataset
#' data("example_dataset")
#'
#' # Run cytotrace2 on the dataset
#' results <- cytotrace2(example_dataset)
#'
#' @import sva
#' @import HiClimR
#' @import magrittr
#' @import dplyr
#' @import stringr
#' @import data.table
#' @import jsonlite
#' @import Seurat
#' @import patchwork
#' @import paletteer
#' @import ggplot2
#' @import parallel
#' @import doParallel
#' @import foreach
#' @import Matrix
#' @import plyr
#'
#' @seealso
#' Website link, or other resources
#'
#' @references
#' Include relevant references or citations here.
#'
#' @author
#' authors of the package
#'
#' @keywords
#' keywords
#'
#' @export
cytotrace2 <- function(input,
isSeurat = FALSE,
enableFast = TRUE,
parallelize_models = TRUE,
ncores = NULL,
subsamplesize1 = 10000,
subsamplesize2 = 3000) {
message('cytotrace2: Started loading data')
if (!isSeurat) {
data <- loadData(input)
} else {
data <- loadData_fromSeurat(input)
}
if(ncol(data) < 10000 & enableFast == TRUE){
enableFast = FALSE
message("The number of cells in your dataset is less than 10000. Fast mode has been disabled.")
}
# managing the number of cores to be utilized
if (enableFast) {
if (Sys.info()["sysname"] == "Windows") {
ncores = 1
message("Windows OS can run only on 1 core")
} else {
if (is.null(ncores)) {
ncores <- detectCores(all.tests = FALSE, logical = FALSE)
}
message("cytotrace2: Running on ", ncores, " core(s).")
}
} else {
if (is.null(ncores)) {
ncores <- 1
}
}
# managing the subsamplesize for first block
if (subsamplesize1 > ncol(data)) {
message ( "The passed subsample size is greater than the number of cells in dataset.
Now setting subsample size to min(ncol(data), 10000)")
subsamplesize1 <- min(ncol(data), 10000)
} else {
subsamplesize1 <- min(subsamplesize1, 10000)
message("Subsamplesize values greater than 10k will be reduced to 10k for efficiency.")
}
# generating subsamples
chunk <- round(ncol(data) / subsamplesize1)
subsamples <-
split(1:ncol(data), sample(factor(1:ncol(data) %% chunk)))
message('cytotrace2: Running on ', chunk, " subsample(s) of length " , subsamplesize1)
# reading preconstructed model weights
parameter_dict <-
readRDS(system.file("extdata", "parameter_dict_17.rds",
package = "CytoTRACE2"))
# REMOVE
parameter_dict <- parameter_dict[1]
# running preprocessing and prediction
message('cytotrace2: Started preprocessing and prediction on subsamples')
if (enableFast) {
message('cytotrace2: Running with fast mode (subsamples are processed in parallel)')
results <-
parallel::mclapply(subsamples, mc.cores = ncores, mc.silent = FALSE, function(subsample) {
dt <- data[subsample]
preprocessed_data <- preprocessData(dt)
expression_data <- preprocessed_data[[1]]
ranked_data <- preprocessed_data[[2]]
predicted_df <-
predictData(parameter_dict, ranked_data, parallelize_models, ncores)
rownames(predicted_df) <- colnames(expression_data)
rbind(expression_data, t(predicted_df))
})
} else {
message('cytotrace2: Running with slow mode (subsamples are processed sequentially)')
results <- lapply(subsamples, function(subsample) {
dt <- data[subsample]
preprocessed_data <- preprocessData(dt)
expression_data <- preprocessed_data[[1]]
ranked_data <- preprocessed_data[[2]]
predicted_df <-
predictData(parameter_dict, ranked_data, parallelize_models, ncores)
rownames(predicted_df) <- colnames(expression_data)
cytotrace <-
smoothData(
expression_data,
predicted_df,
ncores = ncores,
enableFast = enableFast,
subsamplesize = subsamplesize2
)
# Prepare final output
predicted_df$Predicted.Order <- cytotrace
# Define the ranges and labels
ranges <- c(-0.1, 0.1, 0.3, 0.5, 0.7, 0.9, 1.1)
labels <-
c(
'Differentiated',
'Unipotent',
'Oligopotent',
'Multipotent',
'Pluripotent',
'Totipotent'
)
# Assign labels based on ranges
order_vector <-
cut(predicted_df$Predicted.Order,
breaks = ranges,
labels = labels)
predicted_df$Predicted.Potency <- order_vector
list(expression_data, predicted_df)
})
}
# binded_results <- bind_cols(results)
# expression_data <- binded_results[-((nrow(binded_results) - 1):nrow(binded_results)), ]
# predicted_df <- t(binded_results[(nrow(binded_results) - 1):nrow(binded_results), ])
# colnames(predicted_df) <- c("Raw.Predicted.Order", "Raw.Predicted.Potency")
expression_data <- do.call(cbind, lapply(results, function(x) x[[1]]))
colnames(expression_data) <- sub("^0\\.", "", colnames(expression_data))
predicted_df <- do.call(rbind, lapply(results, function(x) x[[2]]))
rownames(predicted_df) <- sub("^0\\.", "", rownames(predicted_df))
# message('cytotrace2: Started smoothing predicted values')
#
# cytotrace <-
#   smoothData(
#     expression_data,
#     predicted_df,
#     ncores = ncores,
#     enableFast = enableFast,
#     subsamplesize = subsamplesize2
#   )
if (!isSeurat) {
message('cytotrace2: Finished')
return(list(expression_data, predicted_df))
} else {
# Create the assay
cytotrace2_expression <- CreateAssayObject(counts = expression_data)
# Add the assay to the Seurat object
object$cytotrace2_expression <- cytotrace2_expression
object <- AddMetaData(
object = input,
metadata = setNames(predicted_df$Predicted.Order, rownames(predicted_df)),
col.name = 'predicted_order'
)
object <- AddMetaData(
object = input,
metadata = setNames(predicted_df$Predicted.Potency, rownames(predicted_df)),
col.name = 'predicted_potency'
)
object <- AddMetaData(
object = input,
metadata = setNames(
predicted_df$Raw.Predicted.Order,
rownames(predicted_df)
),
col.name = 'raw_predicted_order'
)
object <- AddMetaData(
object = input,
metadata = setNames(
predicted_df$Raw.Predicted.Potency,
rownames(predicted_df)
),
col.name = 'raw_predicted_potency'
)
message('cytotrace2: Finished')
return(object)
}
}
cytotrace2_result <- cytotrace2(input)
plotData(cytotrace2_result, annotation)
input_path <- system.file("extdata", "Mouse_Data_StandardProtocol_Neuron_phenotype_GSG.csv", package = "CytoTRACE2")
setwd("~/Desktop/newmanlab/Cytotrace 2/cytotrace2_r/CytoTRACE2/R")
devtools::document()
